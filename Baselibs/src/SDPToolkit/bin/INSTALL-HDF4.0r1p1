#! /bin/sh
#-----------------------------------------------------------------------------
# filename:
# 	INSTALL-HDF4.0r1p1
#
# description:
# 	Installation script module for installing HDF 4.0 release 1, patch 1
# 	for the SDP (PGS) Toolkit.  It implements patches to the NCSA 
# 	installation procedure to allow for trouble-free installation on
# 	the platforms supported by the SDP (PGS) Toolkit.
#
# usage:
# 	Called from INSTALL-HDF
#
# 	INSTALL-HDF4.0r1p1 -h[elp] 
#
# 	  -h      : display this help message and exit
#
# notes:
# 	This is NOT a standalone script.  It is only intended to be run
# 	by INSTALL-HDF, the HDF installation script.
# 
# author:
#        Mike Sucher / Applied Research Corp.
#
# history:
#       23-Apr-1996 MES Initial version
# 	26-Apr-1996 MES Updated PreConfigure compiler logic.
# 	02-Jul-1996 MES Updated to handle SunOS 5.5
#-----------------------------------------------------------------------------


#
# Save starting directory, path
# Create error message header
#

start_dir=`pwd`
start_path=$PATH
this_script="`basename $0`"
script_error="$this_script: Error:"

#
# Get absolute pathname where this script is located
# This allows the script to locate any needed auxilliary files
#

script_dir="`dirname $0`"
abs="`echo $script_dir | cut -c1`"
if [ "$abs" != "/" ] ; then
    script_dir="`pwd`/$script_dir"
fi


#****************************************************************
#                                                               *
#                   * * * Functions  * * *                      *
#                                                               *
#****************************************************************

#
# Function to output error message
#

WriteError()
{
    echo ""
    echo "${this_script}: Error: $*"  >&2
}


#
# Function to output message to logfile and console
#

EchoAndLog()
{
    echo ""
    echo "$*"
    if [ "$log_file" != "" ] ; then
        echo "" >> $log_file
        echo "$*" >> $log_file
    fi
}


#
# Function prompt for user response
#

UserPrompt()
{
    echo "$* \\c" > /dev/tty
    read user_response
}


#
# Function to output help message and exit
#

Help()
{
    sed -n '/filename:/,/author:/p' $0 | grep -v "author:" | cut -c3-300 | more
    #this line must be here because it contains the string: "author:"
    exit
}


#
# Function to implement pre-configure installation fixes for sgi
#

PreConfigFixes_sgi()
{
    cd $start_dir

    EchoAndLog "Pre-configure patching for $BRAND... "

    #
    # Despite overrides in Makefile.in, the configure script steadfastly
    # tries to change the compilers.  To get around this, we edit the
    # file config/<arch-file> to comment out the offending lines that get
    # get included in the Makefile generated by configure.
    #

    cd $start_dir/config

    #
    # Check to see if this is a 32-bit or 64-bit machine
    #

    case `uname` in 
      IRIX   ) file=mh-irix5 ;;		# 32-bit
      IRIX64 ) file=mh-irix6 ;;		# 64-bit (SGI Challenge)
      * )      EchoAndLog "Unsupported SGI OS: `uname`" ; exit ;;
    esac

    if [ ! -f $file.ncsa ] ; then
        mv $file $file.ncsa
    fi

    cat $file.ncsa |
    sed '/^CC *=/s/^/#/' |
    sed '/^FC *=/s/^/#/' |
    cat > $file

    cd $start_dir
}


#
# Function to implement pre-configure installation fixes for sgi32
#

PreConfigFixes_sgi32()
{
    cd $start_dir

    EchoAndLog "Pre-configure patching for $BRAND ... "

    #
    # Despite overrides in Makefile.in, the configure script steadfastly
    # tries to change the compilers.  To get around this, we edit the
    # file config/<arch-file> to comment out the offending lines that get
    # get included in the Makefile generated by configure.
    #

    cd $start_dir/config

    if [ ! -f mh-irix6.ncsa ] ; then
        mv mh-irix6 mh-irix6.ncsa
    fi

    cat mh-irix6.ncsa |
    sed '/^CC *=/s/^/#/' |
    sed '/^FC *=/s/^/#/' |
    cat > mh-irix6

    cd $start_dir
}


#
# Function to implement pre-configure installation fixes for sgi64
#

PreConfigFixes_sgi64()
{
    cd $start_dir

    EchoAndLog "Pre-configure patching for $BRAND... "

    #
    # Despite overrides in Makefile.in, the configure script steadfastly
    # tries to change the compilers.  To get around this, we edit the
    # file config/<arch-file> to comment out the offending lines that get
    # get included in the Makefile generated by configure.
    #

    cd $start_dir/config

    if [ ! -f mh-irix6.ncsa ] ; then
        mv mh-irix6 mh-irix6.ncsa
    fi

    cat mh-irix6.ncsa |
    sed '/^CC *=/s/^/#/' |
    sed '/^FC *=/s/^/#/' |
    cat > mh-irix6

    cd $start_dir
}




#
# Function to implement pre-configure installation fixes for SunOs 4.x
#

PreConfigFixes_sun4()
{
    cd $start_dir

    EchoAndLog "Pre-configure patching for SunOs `uname -r`... "

    #
    # Despite overrides in Makefile.in, the configure script steadfastly
    # tries to make gcc the default C compiler.  To get around this we
    # edit the file config/mh-sun to comment out the offending lines that
    # get included in the Makefile generated by configure.
    #

    cd $start_dir/config

    if [ ! -f mh-sun.ncsa ] ; then
        mv mh-sun mh-sun.ncsa
    fi

    cat mh-sun.ncsa |
    sed '/^CC *=/s/^/#/' |
    sed '/^CFLAGS *=/s/^/#/' |
    cat > mh-sun

    cd $start_dir
}


#
# Function to implement pre-configure installation fixes for SunOs 5.x
#
# NOTE:
#     All files that are modified are first backed up to <filename>.ncsa
# unless the backups already exist.  This allows the installation to be
# re-run without restoring the original files from the distribution file.
#
# These fixes were determined empirically by David Wynne, Applied Research Corp.
#

PreConfigFixes_sun5()
{
    cd $start_dir

    EchoAndLog "Pre-configure patching for SunOs `uname -r`... "

    #
    # Patch the configure script
    # This depends on which sub-version of SunOs 5 we are running.
    #

    sub_version=`uname -r | awk -F. '{print $2}'` 

    case "$sub_version" in

      2 | 3) 				# SunOs 5.2 or 5.3
        if [ ! -f configure.ncsa ] ; then
            mv configure configure.ncsa
        fi
        sed '522s/^/sh /' configure.ncsa > configure
        chmod +x configure
        ;;

      4 | 5)				# SunOs 5.4 or 5.5
        if [ ! -f configure.ncsa ] ; then
            mv configure configure.ncsa
        fi
        sed '552s/^/rsh /' configure.ncsa > configure
        chmod +x configure
        ;;

      * ) 				# others are not supported
        WriteError "SunOS 5.$sub_version is not supported."
        exit 1
        ;;

    esac

    #
    # No ranlib: use touch instead
    #

    if [ ! -f Makefile.in.ncsa ] ; then
        mv Makefile.in Makefile.in.ncsa
    fi
    sed 's/^RANLIB = ranlib/RANLIB = touch/' Makefile.in.ncsa > Makefile.in

    #
    # Modify the .c rule in hdf/util/Makefile.in 
    # to append -lm to list of libraries linked.
    #

    cd $start_dir/hdf/util

    if [ ! -f Makefile.in.ncsa ] ; then
        mv Makefile.in Makefile.in.ncsa
    fi

    sed '/$(LIBSX)/s/$/ -lm/' Makefile.in.ncsa > Makefile.in


    #
    # No ranlib: use touch instead, in all mfhdf/.../Makefile.in
    #

    cd $start_dir/mfhdf

    files=`find . -name Makefile.in -print`

    for file in $files ; do

        if [ ! -f $file.ncsa ] ; then
            mv  $file $file.ncsa
        fi

        sed '/^RANLIB/s/=.*$/= touch/' $file.ncsa > $file

    done


    #
    # Fix up XDR object files in mfhdf/libsrc
    #

    cd $start_dir/mfhdf/libsrc

    mv Makefile.in Makefile.in.tmp
    sed 's/$(XDRFILE).o/xdrposix.o xdrstdio.o/' Makefile.in.tmp > Makefile.in


    #
    # Append "-lnsl -lm" to list of libraries linked in  mfhdf/...
    # (-lm is needed by nctest)
    #

    cd $start_dir/mfhdf
    dirs="ncdump ncgen nctest dumper"

    for dir in $dirs ; do

        cd $dir

        mv Makefile.in Makefile.in.tmp

        sed '/^LIBS/s/$/ -lnsl -lm/' Makefile.in.tmp > Makefile.in

        cd ..

    done


    #
    # Set OS to "sunos" in  mfhdf/fortran
    #

    cd $start_dir/mfhdf/fortran

    mv Makefile.in Makefile.in.tmp
    sed '/^OS/s/$/sunos/' Makefile.in.tmp > Makefile.in


    #
    # Return to starting directory
    #

    cd $start_dir

}


#
# Function to implement post-configure installation fixes for SunOs 5.x
#
# These fixes were determined empirically by David Wynne, Applied Research Corp.
#

PostConfigFixes_sun5()
{
    cd $start_dir

    EchoAndLog "Post-configure patching for SunOs `uname -r`... "

    #
    # Makefile in hdf/jpeg is hosed, run make directly to build library
    #

    cd $start_dir/hdf/jpeg

    sed 's/ranlib/touch/' makefile.unix > makefile.sun5 # no ranlib

    EchoAndLog "Running make -f makefile.sun5 in `pwd`"

    if [ "$log_file" != "" ] ; then
        echo "" >> $log_file
        make -f  makefile.sun5 >> $log_file 2>&1
    else
        echo ""
        make -f  makefile.sun5
    fi

    cd $start_dir
}


#
# Function to implement post-configure installation fixes for 
# platforms that do not have tbl or neqn
#

PostConfigFixes_NoTblNeqn()
{
    #
    # Edit the Makefiles generated by configure, setting the values
    # of 'neqn' and 'tbl' to 'cat', so that man page installation
    # can proceed without fatal errors.   Note: this may cause some
    # man pages to be improperly formatted.   This only appears to
    # be a problem in the mfhdf section, so only those makefiles
    # are patched.
    # 

    cd $start_dir/mfhdf

    files=`find . -name Makefile -print`

    for file in $files ; do

        mv $file $file.tmp
        cat $file.tmp |
        sed 's/neqn/cat/g' |
        sed 's/tbl/cat/g' |
        cat > $file

    done

    cd $start_dir

}


#
# Function to do architecture-specific pre-configure fixes
#
    
PreConfigure()
{

    cd $start_dir

    #
    # Set C compiler based on value of $CC
    # Set C compilation flags based on value of $CFLAGS
    # Set FORTRAN compiler based on value of $F77
    # 
    # NOTE: 
    #     This is done recursively for ALL Makefile.in files because
    # on some platforms, the compiler variables are not inherited from the
    # the calling Makefile.


    files=`find . -name Makefile.in -print`

    if [ "$CC" != "" ] ; then

        if [ "$CFLAGS" = "" ] ; then

           for file in $files ; do

                if [ ! -f $file.ncsa.gcc ] ; then
                    mv  $file $file.ncsa.gcc
                fi

                cat $file.ncsa.gcc |
                sed '/^CC/s/=.*$'"/= $CC/" | 
                sed '/^FC/s/=.*$'"/= $F77/" |
                cat > $file.ncsa

                cp $file.ncsa $file

            done

        else

           for file in $files ; do

                if [ ! -f $file.ncsa.gcc ] ; then
                    mv  $file $file.ncsa.gcc
                fi

                cat $file.ncsa.gcc |
                sed '/^CC/s/=.*$'"/= $CC/" | 
                sed '/^CFLAGS/s/=.*$'"/= $CFLAGS/" |
                sed '/^FC/s/=.*$'"/= $F77/" |
                cat > $file.ncsa

                cp $file.ncsa $file

            done

        fi

    else

        EchoAndLog "Warning: Environment variable(s) CC and/or F77 not set."
        EchoAndLog "If CC is not set, the installation defaults to using gcc"

    fi


    #
    # Call architecture-specific functions
    #

    case $BRAND in
    
        cray  ) ;;
    
        dec   ) ;;
    
        hp    ) ;;
    
        ibm   ) ;;
    
        sgi   ) PreConfigFixes_sgi ;;
    
        sgi32 ) PreConfigFixes_sgi32 ;;
    
        sgi64 ) PreConfigFixes_sgi64 ;;
    
        sun4  ) PreConfigFixes_sun4 ;;
    
        sun5  ) PreConfigFixes_sun5 ;;
    
        *     ) WriteError "Architecture $BRAND is not supported."
                exit 1 ;;
    
    esac

    cd $start_dir

}


#
# Function to do architecture-specific post-configure fixes
#
    
PostConfigure()
{
    cd $start_dir

    case $BRAND in
    
        cray  ) ;;
    
        dec   ) ;;
    
        hp    ) ;;
    
        ibm   ) PostConfigFixes_NoTblNeqn ;;
    
        sgi   ) PostConfigFixes_NoTblNeqn ;;
    
        sgi32 ) PostConfigFixes_NoTblNeqn ;;
    
        sgi64 ) PostConfigFixes_NoTblNeqn ;;
    
        sun4  ) ;;
    
        sun5  ) PostConfigFixes_sun5 ;;
    
        *     ) WriteError "Architecture $BRAND is not supported."
                exit 1 ;;
    
    esac

    cd $start_dir
}



#****************************************************************
#                                                               *
#                  * * * Main Program  * * *                    *
#                                                               *
#****************************************************************


#
# Check for help request
#

case "$1" in

  h | help ) Help ;;

esac


#
# Make sure we're not running standalone
#

if [ "$hdf_install_caller" = "" ] ; then

    WriteError "This script can only be run from INSTALL-HDF."
    Help

else

    # Here we set up the HDF installation directory,
    # for use by the configure script.  
    # 
    # It is set to $HDFHOME/hdf, for backwards compatibility with 
    # the installed HDF directory structure that the toolkit was 
    # using with the 3.3r4 version of HDF.
    # 

    install_dir="$HDFHOME/hdf"

    if [ ! -d "$HDFHOME" ] ; then 	# create the parent, if needed.
        mkdir $HDFHOME
    fi
    if [ ! -d "$install_dir" ] ; then 	# create the install dir, if needed.
        mkdir $install_dir
    fi

fi



#
# Announce
#

EchoAndLog "Running $this_script"

#
# Do architecture-specific pre-configure fixes
#

PreConfigure


#
# Run the NCSA-supplied configure script
#

cd $start_dir

tmp_home=$HOME			# save $HOME
HOME=`pwd` ; export HOME	# change it to avoid interaction w/ .cshrc

EchoAndLog "Running ./configure -v --prefix=$install_dir"

if [ "$log_file" != "" ] ; then
    echo "" >> $log_file
    ./configure -v --prefix=$install_dir >> $log_file 2>&1
else
    echo ""
    ./configure -v --prefix=$install_dir
fi

HOME=$tmp_home ; export HOME	# restore $HOME


#
# Do architecture-specific post-configure fixes
#

PostConfigure


#
# Run the make utility to compile the library and utiltites
#

EchoAndLog "Running make, target=all"

if [ "$log_file" != "" ] ; then
    echo "" >> $log_file
    make all >> $log_file 2>&1
    tmp_status=$?
else
    echo ""
    make all
    tmp_status=$?
fi

if [ "$tmp_status" != 0 ] ; then
    EchoAndLog "Run of 'make all' failed."
    exit 1
fi


#
# Run the make utility install the libraries, utilities, includes and man pages 
#

EchoAndLog "Running make, target=install "

if [ "$log_file" != "" ] ; then
    echo "" >> $log_file
    make install >> $log_file 2>&1
    tmp_status=$?
else
    echo ""
    make install
    tmp_status=$?
fi


if [ "$tmp_status" != 0 ] ; then
    EchoAndLog "Run of 'make install' failed."
    exit 1
fi

