! $Id$
!
! Earth System Modeling Framework
! Copyright 2002-2012, University Corporation for Atmospheric Research, 
! Massachusetts Institute of Technology, Geophysical Fluid Dynamics 
! Laboratory, University of Michigan, National Centers for Environmental 
! Prediction, Los Alamos National Laboratory, Argonne National Laboratory, 
! NASA Goddard Space Flight Center.
! Licensed under the University of Illinois-NCSA License.
!
!==============================================================================
!
^define ESMF_FILENAME "ESMF_FieldGather.F90"
!
!   ESMF Field Communications Gather module
module ESMF_FieldGatherMod
!
!==============================================================================
!
!
!------------------------------------------------------------------------------
! INCLUDES
^include "ESMF.h"
#include "ESMF_TypeKindRankMacros.hcppF90"
!------------------------------------------------------------------------------
!
!BOPI
! !MODULE: ESMF_FieldGatherMod - FieldGather routines for Field objects
!
! !DESCRIPTION:
! The code in this file implements the {\tt ESMF\_FieldGather} subroutine.
!
!EOPI
!------------------------------------------------------------------------------
! !USES:
    use ESMF_UtilTypesMod
    use ESMF_InitMacrosMod
    use ESMF_LogErrMod
    use ESMF_VMMod
    use ESMF_FieldMod
    use ESMF_FieldGetMod
    use ESMF_ArrayMod
    implicit none
    private
!------------------------------------------------------------------------------
! !PRIVATE TYPES:
!  <none>
!------------------------------------------------------------------------------
! !PUBLIC TYPES:
!  <none>
!------------------------------------------------------------------------------
!
! !PUBLIC MEMBER FUNCTIONS:
    public ESMF_FieldGather
!
!------------------------------------------------------------------------------
! The following line turns the CVS identifier string into a printable variable.
    character(*), parameter, private :: version = &
      '$Id$'

!------------------------------------------------------------------------------
    interface ESMF_FieldGather
        TypeKindRankInterfaceMacro(FieldGather)
        module procedure ESMF_FieldGatherNotRoot
    end interface
!------------------------------------------------------------------------------
contains

#define FieldGatherDoc() \
!---------------------------------------------------------------------------- @\
!BOP @\
! @\
! !IROUTINE: ESMF_FieldGather - Gather a Fortran array from an ESMF_Field @\
! @\
! !INTERFACE: @\
! subroutine ESMF_FieldGather<rank><type><kind>(field, farray, & @\
!   rootPet, tile, vm, rc) @\
! @\
! !ARGUMENTS: @\
!   type(ESMF_Field),           intent(in)              :: field @\
!   <type>(ESMF_KIND_<kind>),   intent(out), target     :: farray(<rank>) @\
!   integer,                    intent(in)              :: rootPet @\
!    type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
!   integer,                    intent(in),   optional  :: tile @\
!   type(ESMF_VM),              intent(in),   optional  :: vm @\
!   integer,                    intent(out),  optional  :: rc @\
! @\
! @\
! @\
! !STATUS: @\
! \begin{itemize} @\
! \item\apiStatusCompatibleVersion{5.2.0r} @\
! \end{itemize} @\
! @\
! !DESCRIPTION: @\
!   Gather the data of an {ESMF\_Field} object into the {\tt farray} located on @\
!   {\tt rootPET}. A single DistGrid tile of {\tt array} must be @\
!   gathered into {\tt farray}. The optional {\tt tile} @\
!   argument allows selection of the tile. For Fields defined on a single @\
!   tile DistGrid the default selection (tile 1) will be correct. The @\
!   shape of {\tt farray} must match the shape of the tile in Field. @\
! @\
!   If the Field contains replicating DistGrid dimensions data will be @\
!   gathered from the numerically higher DEs. Replicated data elements in @\
!   numericaly lower DEs will be ignored. @\
! @\
!   The implementation of Scatter and Gather is not seqence index based. @\
!   If the Field is built on arbitrarily distributed Grid, Mesh, LocStream or XGrid, @\
!   Gather will not gather data to rootPet @\
!   from source data points corresponding to the sequence index on rootPet. @\
!   Instead Gather will gather a contiguous memory range from source PET to @\
!   rootPet. The size of the memory range is equal to the number of  @\
!   data elements on the source PET. Vice versa for the Scatter operation. @\
!   In this case, the user should use {\tt ESMF\_FieldRedist} to achieve @\
!   the same data operation result. For examples how to use {\tt ESMF\_FieldRedist} @\
!   to perform Gather and Scatter, please refer to @\
!   \ref{sec:field:usage:redist_gathering} and @\
!   \ref{sec:field:usage:redist_scattering}. @\
! @\
!   This version of the interface implements the PET-based blocking paradigm: @\
!   Each PET of the VM must issue this call exactly once for {\em all} of its @\
!   DEs. The call will block until all PET-local data objects are accessible. @\
! @\
!   For examples and associated documentations using this method see Section  @\
!   \ref{sec:field:usage:gather_2dptr}. @\
! @\
!   The arguments are: @\
!   \begin{description} @\
!   \item[field] @\
!     The {\tt ESMF\_Field} object from which data will be gathered. @\
!   \item[\{farray\}] @\
!     The Fortran array into which to gather data. Only root @\
!     must provide a valid {\tt farray}, the other PETs may treat @\
!     {\tt farray} as an optional argument. @\
!   \item[rootPet] @\
!     PET that holds the valid destination array, i.e. {\tt farray}. @\
!   \item[{[tile]}] @\
!     The DistGrid tile in {\tt field} from which to gather {\tt farray}. @\
!     By default {\tt farray} will be gathered from tile 1. @\
!   \item[{[vm]}] @\
!     Optional {\tt ESMF\_VM} object of the current context. Providing the @\
!     VM of the current context will lower the method|s overhead. @\
!   \item[{[rc]}] @\
!     Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!   \end{description} @\
! @\
!EOP @\
!---------------------------------------------------------------------------- @\

#define FieldGatherMacro(mname, mtypekind, mrank, mdim, mlen, mrng, mloc) \
!---------------------------------------------------------------------------- @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_FieldGather" @\
    subroutine ESMF_FieldGather##mrank##D##mtypekind(field,  farray, & @\
        rootPet, keywordEnforcer, tile, vm, rc) @\
@\
        ! input arguments @\
        type(ESMF_Field), intent(in)                           :: field  @\
        mname (ESMF_KIND_##mtypekind), intent(out), target     :: farray(mdim) @\
        integer, intent(in)                                    :: rootPet @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
        integer, intent(in), optional                          :: tile     @\
        type(ESMF_VM), intent(in), optional                    :: vm  @\
        integer, intent(out), optional                         :: rc  @\
@\
        ! internal local variables @\
        integer                                     :: localrc @\
        type(ESMF_Array)                            :: array   @\
@\
        ! Initialize return code; assume routine not implemented @\
        localrc = ESMF_RC_NOT_IMPL @\
        if(present(rc)) rc = ESMF_RC_NOT_IMPL @\
@\
        ! check variable: focus on field and farray @\
        ! rely on ArrayGather to check the sanity of other variables @\
        ESMF_INIT_CHECK_DEEP(ESMF_FieldGetInit, field, rc) @\
        ESMF_INIT_CHECK_DEEP(ESMF_VMGetInit, vm, rc) @\
@\
        call ESMF_FieldGet(field, array=array, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, & @\
            ESMF_ERR_PASSTHRU, & @\
            ESMF_CONTEXT, rcToReturn=rc)) return @\
@\
        ! perform gather through internal array @\
        call ESMF_ArrayGather(array, farray, rootPet=rootPet, tile=tile, & @\
          vm=vm, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, & @\
            ESMF_ERR_PASSTHRU, & @\
            ESMF_CONTEXT, rcToReturn=rc)) return @\
@\
        if (present(rc)) rc = ESMF_SUCCESS @\
    end subroutine ESMF_FieldGather##mrank##D##mtypekind @\
!------------------------------------------------------------------------------ @\

TypeKindRankDeclarationMacro(FieldGather)

! -------------------------- ESMF-public method -----------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldGather"
subroutine ESMF_FieldGatherNotRoot(field, tile, rootPet, vm, rc)

        type(ESMF_Field),           intent(in)              :: field
        integer,                    intent(in),   optional  :: tile
        integer,                    intent(in)              :: rootPet
        type(ESMF_VM),              intent(in),   optional  :: vm
        integer,                    intent(out),  optional  :: rc
    
        ! Local variables
        integer                       :: localrc        ! local return code
        type(ESMF_Array)              :: array
    
        ! Initialize return code
        localrc = ESMF_RC_NOT_IMPL
        if (present(rc)) rc = ESMF_RC_NOT_IMPL
    
        ! Check init status of arguments
        ESMF_INIT_CHECK_DEEP(ESMF_FieldGetInit, field, rc)
        ESMF_INIT_CHECK_DEEP(ESMF_VMGetInit, vm, rc)

        call ESMF_FieldGet(field, array=array, rc=localrc)
        if (ESMF_LogFoundError(localrc, &
            ESMF_ERR_PASSTHRU, &
            ESMF_CONTEXT, rcToReturn=rc)) return

        call ESMF_ArrayGather(array, rootPet=rootPet, tile=tile, vm=vm, &
          rc=localrc)
        if (ESMF_LogFoundError(localrc, &
            ESMF_ERR_PASSTHRU, &
            ESMF_CONTEXT, rcToReturn=rc)) return

        ! Return successfully
        if (present(rc)) rc = ESMF_SUCCESS

end subroutine ESMF_FieldGatherNotRoot

end module
