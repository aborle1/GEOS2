#!/usr/bin/env perl
#=======================================================================
# name - mk_Restarts
# purpose - wrapper script to run programs which regrid surface restarts
#=======================================================================
use strict;
use warnings;
use FindBin qw($Bin);
use lib ("$Bin");

# global variables
#-----------------
my ($saltwater, $lake, $landice, $catch, $catchcn, $route);
my ($surflay, $rsttime, $grpID, $numtasks, $walltime, $rescale, $qos, $yyyymm);
my ($mk_catchcn_j, $mk_catchcn_log);

# mk_catchcn job and log file names
#----------------------------------
$mk_catchcn_j   = "mk_catchcn.j";
$mk_catchcn_log = "mk_catchcn.log";

# main program
#-------------
{
    my ($cmd, $line, $pid);

    init();

    #----------------
    # catchcn restart
    #----------------
    if ($catchcn) {
        write_mk_catchcn_j() unless -e $mk_catchcn_j;

        # run interactively if already on interactive job nodes
        #------------------------------------------------------
        if (-x $mk_catchcn_j) {
            $cmd = $mk_catchcn_j;
            system_($cmd);
        }
        else {
            $cmd = "sbatch $mk_catchcn_j";
            print "$cmd\n";
            chomp($line = `$cmd`);
            $pid = (split /\s+/, $line)[-1];
        }
    }

    #------------------
    # saltwater restart
    #------------------
    if ($saltwater) {
        $cmd = "$Bin/mk_LakeLandiceSaltRestarts "
            .       "OutData/\*.til "
            .       "InData/\*.til "
            .       "InData/\*saltwater\* 0";
        system_($cmd);
    }

    #-------------
    # lake restart
    #-------------
    if ($lake) {
        $cmd = "$Bin/mk_LakeLandiceSaltRestarts "
            .       "OutData/\*.til "
            .       "InData/\*.til "
            .       "InData/\*lake\* 19";
        system_($cmd);
    }

    #----------------
    # landice restart
    #----------------
    if ($landice) {
        $cmd = "$Bin/mk_LakeLandiceSaltRestarts "
            .       "OutData/\*.til "
            .       "InData/\*.til "
            .       "InData/\*landice\* 20";
        system_($cmd);
    }

    #--------------
    # catch restart
    #--------------
    if ($catch) {
        $cmd = "$Bin/mk_CatchRestarts "
            .       "OutData/\*.til "
            .       "InData/\*.til "
            .       "InData/\*catch_\* $surflay";
        system_($cmd);
    }

    #--------------
    # route restart
    #--------------
    if ($route) {
        $cmd = "$Bin/mk_RouteRestarts $yyyymm";
        system_($cmd);
    }

    wait_for_pid($pid) if $pid;
}

#=======================================================================
# name - init
# purpose - get runtime flags to determine which restarts to regrid
#=======================================================================
sub init {
    use Getopt::Long;
    my $help;
    $| = 1;  # flush buffer after each output operation

    GetOptions( "saltwater" => \$saltwater,
                "lake"      => \$lake,
                "landice"   => \$landice,
                "catch"     => \$catch,
                "catchcn"   => \$catchcn,
                "route"     => \$route,

                "surflay=i" => \$surflay,
                "rsttime=i" => \$rsttime,
                "grpID=s"   => \$grpID,

                "ntasks=i"  => \$numtasks,
                "walltime=s"=> \$walltime,
                "rescale"   => \$rescale,
                "qos=s"     => \$qos,
                "h|help"    => \$help );
    usage() if $help;

    # error if no restart specified
    #------------------------------
    die "Error. No restart specified;"
        unless $saltwater or $lake or $landice or $catch or $catchcn;

    # rsttime and grpID values are needed for catchcn
    #----------------------------------------------
    if ($catchcn) {
        die "Error. Must specify rsttime for catchcn;" unless $rsttime;
        die "Error. rsttime not in yyyymmddhh format: $rsttime;"
            unless $rsttime =~ m/^\d{10}$/;

        unless ($grpID) {
            $grpID = `$Bin/getsponsor.pl -d`;
            print "Using default grpID = $grpID\n";
        }
        unless ($walltime) { $walltime = "1:00:00" }
        unless ($numtasks) { $numtasks = 84 }
        unless ($rescale)  { $rescale  = 0 }
        $qos = "" unless $qos;
    }

    # rsttime value is needed for route
    #----------------------------------
    if ($route) {
        die "Error. Must specify rsttime for route;" unless $rsttime;
        die "Error. Cannot extract yyyymm from rsttime: $rsttime"
            unless $rsttime =~ m/^\d{6,}$/;
        $yyyymm = $1 if $rsttime =~ /^(\d{6})/;
    }
}

#=======================================================================
# name - write_mk_catchcn_j
# purpose - write job file to make catchcn restart
#=======================================================================
sub write_mk_catchcn_j {
    my ($grouplist, $QOS, $FH);

    $grouplist = "";
    $grouplist = "SBATCH --account=$grpID" if $grpID;

    $QOS = "";
    if ($qos eq "debug") {
        if ($numtasks <= 532 and $walltime le "1:00:00") {
            $QOS = "SBATCH --qos=debug";
        }
    }

    print("\nWriting jobscript: $mk_catchcn_j\n");
    open CNj, ">> $mk_catchcn_j" or die "Error opening $mk_catchcn_j: $!";

    $FH = select;
    select CNj;

    print <<"EOF";
#!/bin/csh -f
#$grouplist
#SBATCH --ntasks=$numtasks
#SBATCH --time=$walltime
#SBATCH --job-name=catchcnj
#SBATCH --constraint=hasw
#SBATCH --output=$mk_catchcn_log
#$QOS

source $Bin/g5_modules
set echo

#limit stacksize unlimited
unlimit

set mk_CatchCNRestarts_X = $Bin/mk_CatchCNRestarts
set Scale_CatchCN_X      = $Bin/Scale_CatchCN
set rescale = $rescale

set OUT_til   = OutData/\*.til
set IN_til    = InData/\*.til
set catchcnIN = InData/\*catchcn_\*

set numtasks = $numtasks
set surflay  = $surflay
set rsttime  = $rsttime
set params = ( \$OUT_til \$IN_til \$catchcnIN \$surflay \$rsttime )

$Bin/esma_mpirun -np \$numtasks \$mk_CatchCNRestarts_X \$params

if (\$rescale) then
    set catchcn_regrid = OutData/\$catchcnIN:t
    set catchcn_scaled = \${catchcn_regrid}.scaled
    \$Scale_CatchCN_X \$catchcnIN \$catchcn_regrid \$catchcn_scaled \$surflay

    set catchcn = \$catchcn_regrid
    mv \$catchcn \${catchcn}.1
    mv \$catchcn_scaled \$catchcn
endif

exit
EOF
;
    close CNj;
    select $FH;
    chmod 0755, $mk_catchcn_j if $ENV{"SLURM_JOBID"};
}

#=======================================================================
# name - system_
# purpose - wrapper for perl system command
#=======================================================================
sub system_ {
    my $cmd = shift @_;
    print "\n$cmd\n";
    die "Error: $!;" if system($cmd);
}

#=======================================================================
# name - wait_for_pid
# purpose - wait for batch job to finish
#
# input parameter
# => $pid: process ID of batch job to wait for
#=======================================================================
sub wait_for_pid {
    my ($pid, $first, %found, $line, $id);
    $pid = shift @_;
    return unless $pid;

    $first = 1;
    while (1) {
        %found = ();
        foreach $line (`qstat | grep $ENV{"USER"}`) {
            $id = (split /\s+/, $line)[0];
            $found{$id} = 1;
        }
        last unless $found{$pid};
        print "\nWaiting for job $pid to finish\n" if $first;
        $first = 0;
        sleep 10;
    }
    print "Job $pid is DONE\n\n" unless $first;
}

#=======================================================================
# name - usage
# purpose - print usage information
#=======================================================================
sub usage {
    use File::Basename ("basename");
    my $name = basename $0;
    print <<"EOF";

usage $name [-saltwater] [-lake] [-landice] [-catch] [-h]

option flags
   -saltwater     regrid saltwater internal restart
   -lake          regrid lake internal restart
   -landice       regrid landice internal restart
   -catch         regrid catchment internal restart
   -catchcn       regrid catchment CN internal restart
   -route         create the route internal restart

   -surflay n     number of surface layers (catch & catchcn)
   -rsttime n10   restart time in format, yyyymmddhh (catchcn) or yyyymm (route)
   -grpID grpID   group ID for batch submittal (catchcn)

   -ntasks nt     number of tasks to assign to catchcn batch job [112]
   -walltime wt   walltime in format \"hh:mm:ss\" for catchcn batch job [1:00:00]
   -rescale
   -qos val       use SLURM --qos=debug, if val eq "debug" and qos debug requirements
                  are met, i.e. numtasks <= 532 and walltime le \"1:00:00\"
   -h             print usage information

EOF
exit;
}
